(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>h});var o=t(537),i=t.n(o),r=t(645),a=t.n(r),c=t(667),s=t.n(c),d=new URL(t(617),t.b),l=new URL(t(44),t.b),u=a()(i()),p=s()(d),A=s()(l);u.push([n.id,"* {\n    margin: 0;\n    border: none;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    height: 100vh;\n    width: 100vw;\n}\n\n.main {\n    display: flex;\n    justify-content: space-around;\n    height: min(70vh);\n    align-items: center;\n}\n\n.p1b,\n.p2b, \n.board {\n    height: 500px;\n    width: 500px;\n    border: 1px solid black;\n    background-color: white;\n    display: grid;\n    grid-template-columns: repeat(10, minmax(50px, 1fr));\n    grid-template-rows: repeat(10, minmax(50px, 1fr));\n\n}\n\n.p1b div,\n.p2b div {\n    /* display: flex;\n    justify-content: center;\n    align-items: center; */\n    border: 1px solid black;\n}\n\n.curtain {\n    position: absolute;\n    height: 500px;\n    width: 500px;\n}\n\nfooter,\nheader {\n    display: flex;\n    background-color: rgb(122, 151, 248);\n    height: min(15vh);\n    font-size: 7vh;\n    justify-content: center;\n    align-items: center;\n}\n\nfooter{\n    font-size: large;\n}\n\n.hit {\n    background-image: url("+p+");\n    background-color: rgb(245, 169, 169);\n    background-size: 100%;\n}\n\n.ship, .shipGroup>div {\n    background-color: blue;\n}\n\n.miss {\n    background-image: url("+A+");\n    background-repeat: no-repeat;\n    background-size: 70%;\n    background-position: center;\n}\n\n.sur{\n    background-image: url("+A+");\n    background-repeat: no-repeat;\n    background-size: 70%;\n    background-position: center;\n}\n\n.scale{\n    background-size: 100%;\n}\n\n.startNew{\n    display: flex;\n    flex-direction: column;\n    height: 150px;\n    width: 200px;\n    background-color: rgb(122, 151, 248);\n    position: absolute;\n    top: 25%;\n    left: 44%;\n    border: 1px solid rgb(0, 0, 0);\n    justify-content: space-around;\n    align-items: center;\n}\n\n.startNew p{\n    font-size: 24px;\n    text-align: center;\n}\n\nbutton {\n    height: 50px;\n    width: 100px;\n    border: 1px solid rgb(0, 0, 0);\n    font-size: 15px;\n}\n\n.placeShips{\n    display: none;\n    flex-direction: column;\n    height: 600px;\n    width: 700px;\n    background-color: rgb(122, 151, 248);\n    position: absolute;\n    border: 2px solid rgb(0, 0, 0);\n    /* justify-content: space-around; */\n    align-items: center;\n}\n\n.placeShips>p{\n    font-size: 40px;\n    margin-bottom: 20px;\n}\n\n.placeShips #board>div{\n    border: 1px solid rgb(0, 0, 0);\n}\n\n.boardwrap{\n    display: flex;\n    width: 630px;\n    justify-content: space-between;\n}\n\n.ships{\n    display: flex;\n    flex-direction: column;\n    height: 500px;\n    width: 100px;\n    background-color: white;\n    align-items: flex-end;\n    background-color: rgb(122, 151, 248);\n}\n\n.ships button{\n    margin-top: 20px;\n}\n\n.ships p{\n    font-size: 25px;\n}\n\nbutton:hover {\n    background-color: rgb(17, 0, 255);\n    color: white;\n}\n\n.shipGroup{\n    display: flex;\n    justify-content: space-between;\n    position: relative;\n    width: 95%;\n    align-items: center;\n    margin-top: 20px;\n}\n\n#carrier{\n    grid-template-columns: repeat(4, min(50px));\n}\n\n#battlecruiser{\n    grid-template-columns: repeat(3, min(50px));\n}\n\n#destroyer{\n    grid-template-columns: repeat(2, min(50px));\n}\n\n#gunship{\n    grid-template-columns: repeat(1, min(50px));\n}\n\n#carrier, #battlecruiser, #destroyer, #gunship {\n    display: grid;\n    background-color: white; \n    grid-template-rows: max(48px);\n}\n\n.part{\n    border: 1px solid black;\n    background-color: rgb(17, 0, 255);\n}\n\n.noBorder{\n    border: none;\n}\n\n.shipspot{\n    background-color: blueviolet;\n}\n\n.forbidden{\n    background-color: rgb(255, 188, 188);\n}\n\n#ok{\n    margin-bottom: 30px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,YAAY;IACZ,UAAU;IACV,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,6BAA6B;IAC7B,iBAAiB;IACjB,mBAAmB;AACvB;;AAEA;;;IAGI,aAAa;IACb,YAAY;IACZ,uBAAuB;IACvB,uBAAuB;IACvB,aAAa;IACb,oDAAoD;IACpD,iDAAiD;;AAErD;;AAEA;;IAEI;;0BAEsB;IACtB,uBAAuB;AAC3B;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,YAAY;AAChB;;AAEA;;IAEI,aAAa;IACb,oCAAoC;IACpC,iBAAiB;IACjB,cAAc;IACd,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,yDAAuD;IACvD,oCAAoC;IACpC,qBAAqB;AACzB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,yDAA8C;IAC9C,4BAA4B;IAC5B,oBAAoB;IACpB,2BAA2B;AAC/B;;AAEA;IACI,yDAA8C;IAC9C,4BAA4B;IAC5B,oBAAoB;IACpB,2BAA2B;AAC/B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,aAAa;IACb,YAAY;IACZ,oCAAoC;IACpC,kBAAkB;IAClB,QAAQ;IACR,SAAS;IACT,8BAA8B;IAC9B,6BAA6B;IAC7B,mBAAmB;AACvB;;AAEA;IACI,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,8BAA8B;IAC9B,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,aAAa;IACb,YAAY;IACZ,oCAAoC;IACpC,kBAAkB;IAClB,8BAA8B;IAC9B,mCAAmC;IACnC,mBAAmB;AACvB;;AAEA;IACI,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,8BAA8B;AAClC;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,8BAA8B;AAClC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,aAAa;IACb,YAAY;IACZ,uBAAuB;IACvB,qBAAqB;IACrB,oCAAoC;AACxC;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,iCAAiC;IACjC,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,kBAAkB;IAClB,UAAU;IACV,mBAAmB;IACnB,gBAAgB;AACpB;;AAEA;IACI,2CAA2C;AAC/C;;AAEA;IACI,2CAA2C;AAC/C;;AAEA;IACI,2CAA2C;AAC/C;;AAEA;IACI,2CAA2C;AAC/C;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,6BAA6B;AACjC;;AAEA;IACI,uBAAuB;IACvB,iCAAiC;AACrC;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,4BAA4B;AAChC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,mBAAmB;AACvB",sourcesContent:["* {\n    margin: 0;\n    border: none;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    height: 100vh;\n    width: 100vw;\n}\n\n.main {\n    display: flex;\n    justify-content: space-around;\n    height: min(70vh);\n    align-items: center;\n}\n\n.p1b,\n.p2b, \n.board {\n    height: 500px;\n    width: 500px;\n    border: 1px solid black;\n    background-color: white;\n    display: grid;\n    grid-template-columns: repeat(10, minmax(50px, 1fr));\n    grid-template-rows: repeat(10, minmax(50px, 1fr));\n\n}\n\n.p1b div,\n.p2b div {\n    /* display: flex;\n    justify-content: center;\n    align-items: center; */\n    border: 1px solid black;\n}\n\n.curtain {\n    position: absolute;\n    height: 500px;\n    width: 500px;\n}\n\nfooter,\nheader {\n    display: flex;\n    background-color: rgb(122, 151, 248);\n    height: min(15vh);\n    font-size: 7vh;\n    justify-content: center;\n    align-items: center;\n}\n\nfooter{\n    font-size: large;\n}\n\n.hit {\n    background-image: url(../src/images/icons8-fire-48.png);\n    background-color: rgb(245, 169, 169);\n    background-size: 100%;\n}\n\n.ship, .shipGroup>div {\n    background-color: blue;\n}\n\n.miss {\n    background-image: url(../src/images/close.png);\n    background-repeat: no-repeat;\n    background-size: 70%;\n    background-position: center;\n}\n\n.sur{\n    background-image: url(../src/images/close.png);\n    background-repeat: no-repeat;\n    background-size: 70%;\n    background-position: center;\n}\n\n.scale{\n    background-size: 100%;\n}\n\n.startNew{\n    display: flex;\n    flex-direction: column;\n    height: 150px;\n    width: 200px;\n    background-color: rgb(122, 151, 248);\n    position: absolute;\n    top: 25%;\n    left: 44%;\n    border: 1px solid rgb(0, 0, 0);\n    justify-content: space-around;\n    align-items: center;\n}\n\n.startNew p{\n    font-size: 24px;\n    text-align: center;\n}\n\nbutton {\n    height: 50px;\n    width: 100px;\n    border: 1px solid rgb(0, 0, 0);\n    font-size: 15px;\n}\n\n.placeShips{\n    display: none;\n    flex-direction: column;\n    height: 600px;\n    width: 700px;\n    background-color: rgb(122, 151, 248);\n    position: absolute;\n    border: 2px solid rgb(0, 0, 0);\n    /* justify-content: space-around; */\n    align-items: center;\n}\n\n.placeShips>p{\n    font-size: 40px;\n    margin-bottom: 20px;\n}\n\n.placeShips #board>div{\n    border: 1px solid rgb(0, 0, 0);\n}\n\n.boardwrap{\n    display: flex;\n    width: 630px;\n    justify-content: space-between;\n}\n\n.ships{\n    display: flex;\n    flex-direction: column;\n    height: 500px;\n    width: 100px;\n    background-color: white;\n    align-items: flex-end;\n    background-color: rgb(122, 151, 248);\n}\n\n.ships button{\n    margin-top: 20px;\n}\n\n.ships p{\n    font-size: 25px;\n}\n\nbutton:hover {\n    background-color: rgb(17, 0, 255);\n    color: white;\n}\n\n.shipGroup{\n    display: flex;\n    justify-content: space-between;\n    position: relative;\n    width: 95%;\n    align-items: center;\n    margin-top: 20px;\n}\n\n#carrier{\n    grid-template-columns: repeat(4, min(50px));\n}\n\n#battlecruiser{\n    grid-template-columns: repeat(3, min(50px));\n}\n\n#destroyer{\n    grid-template-columns: repeat(2, min(50px));\n}\n\n#gunship{\n    grid-template-columns: repeat(1, min(50px));\n}\n\n#carrier, #battlecruiser, #destroyer, #gunship {\n    display: grid;\n    background-color: white; \n    grid-template-rows: max(48px);\n}\n\n.part{\n    border: 1px solid black;\n    background-color: rgb(17, 0, 255);\n}\n\n.noBorder{\n    border: none;\n}\n\n.shipspot{\n    background-color: blueviolet;\n}\n\n.forbidden{\n    background-color: rgb(255, 188, 188);\n}\n\n#ok{\n    margin-bottom: 30px;\n}"],sourceRoot:""}]);const h=u},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,i,r){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);o&&a[l[0]]||(void 0!==r&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=r),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),i&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=i):l[4]="".concat(i)),e.push(l))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(i," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([r]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var r={},a=[],c=0;c<n.length;c++){var s=n[c],d=o.base?s[0]+o.base:s[0],l=r[d]||0,u="".concat(d," ").concat(l);r[d]=l+1;var p=t(u),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)e[p].references++,e[p].updater(A);else{var h=i(A,o);o.byIndex=c,e.splice(c,0,{identifier:u,updater:h,references:1})}a.push(u)}return a}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var r=o(n=n||[],i=i||{});return function(n){n=n||[];for(var a=0;a<r.length;a++){var c=t(r[a]);e[c].references--}for(var s=o(n,i),d=0;d<r.length;d++){var l=t(r[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}r=s}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,i&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},44:(n,e,t)=>{n.exports=t.p+"3f1efb87491214c146da.png"},617:(n,e,t)=>{n.exports=t.p+"790566af980138ba22cf.png"}},e={};function t(o){var i=e[o];if(void 0!==i)return i.exports;var r=e[o]={id:o,exports:{}};return n[o](r,r.exports,t),r.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var o=e.getElementsByTagName("script");o.length&&(n=o[o.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,(()=>{var n=t(379),e=t.n(n),o=t(795),i=t.n(o),r=t(569),a=t.n(r),c=t(565),s=t.n(c),d=t(216),l=t.n(d),u=t(589),p=t.n(u),A=t(426),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=a().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=l(),e()(A.Z,h),A.Z&&A.Z.locals&&A.Z.locals;var g,f,m,v,b,C,B,I,x,E,y,L,k,w,S,M,j=(g=function n(e){var t=1+"".concat(Math.ceil(10*Math.random()))+"".concat(Math.ceil(10*Math.random()));return-1===e.board.illegalMoves.indexOf(t)?t:n(e)},f=function(n){10===n[0].board.shipsSunk().length?(n[1].isWinner=!0,O.displayStartNew("Stupid computer wins!")):10===n[1].board.shipsSunk().length&&(n[0].isWinner=!0,O.displayStartNew("You win!"))},{moveCounter:0,makeMove:function(n,e){-1===e[1].board.illegalMoves.indexOf(n)&&(e[1].board.receiveAttack(n,e[1]),e[0].board.receiveAttack(g(e[0]),e[0]),f(e))},checkWinner:f,startNew:function(){location.reload()},startRandom:function(n){console.log(n),n[0].board.randomLocations(),n[1].board.randomLocations(),O.removePlaceShipPopup(),O.displayBoards(n),O.displayShips(n[0].getFleet())},parseCoords:function(n){for(var e=[],t=0;t<n.length;t++){e.push([]);for(var o=0;o<n[t].length;o++){var i="1".concat(n[t][o]);e[t].push(i)}}return e},passCoords:function(n,e){for(var t=0;t<n.length;t++)e[0].board.ships[t].locations=n[t]},startPlaced:function(n){n[1].board.randomLocations(),O.removePlaceShipPopup(),O.displayBoards(n),O.displayShips(n[0].getFleet())}}),O=(m=function(n){for(var e=1;e<3;e++){for(var t=document.getElementById("p"+e+"b");t.firstChild;)t.firstChild.remove();for(var o=1;o<11;o++)for(var i=function(i){var r=document.createElement("div");void 0!==n&&(r.setAttribute("id",e+"".concat(o)+i),r.setAttribute("class","cell"),2===e&&r.addEventListener("click",(function(){j.makeMove(r.id,n)}))),t.appendChild(r)},r=1;r<11;r++)i(r)}},v=document.getElementById("board"),b=function(n){for(var e=n;e.firstChild;)e.firstChild.remove();for(var t=1;t<11;t++)for(var o=1;o<11;o++){var i=document.createElement("div");i.setAttribute("id","".concat(t).concat(o)),i.setAttribute("class","container"),e.appendChild(i);for(var r=0;r<I.coords.length;r++)I.coords[r].indexOf(i.id)>=0&&i.classList.add("ship")}!function(n){for(var e=0;e<n.length;e++){var t=document.getElementById(n[e]);null!=t&&t.classList.value.indexOf("ship")<0&&t.classList.add("forbidden")}}(I.surLocations)},C=function(){for(var n=document.getElementById("ok"),e=1;e<11;e++)for(var t=1;t<11;t++){var o=document.getElementById("".concat(e).concat(t));if(I.carrierCounter<1)E(o,e,t);else if(I.cruiserCounter<2)y(o,e,t);else if(I.destroyerCounter<3)L(o,e,t);else{if(!(I.gunboatCounter<4))return void(n.disabled=!1);k(o,e,t)}}},B=function(n,e,t){var o=n,i=e;if(I.vertical){for(var r=0;r<t.length;r++)I.surLocations.push("".concat(o+r)+(i+1)),I.surLocations.push("".concat(o+r)+(i-1));I.surLocations.push("".concat(o-1)+(i-1)),I.surLocations.push("".concat(o-1)+i),I.surLocations.push("".concat(o-1)+(i+1)),i-1!=0&&I.surLocations.push("".concat(o+t.length)+(i-1)),I.surLocations.push("".concat(o+t.length)+i),I.surLocations.push("".concat(o+t.length)+(i+1))}else{for(var a=0;a<t.length;a++)I.surLocations.push("".concat(o+1)+(i+a)),I.surLocations.push("".concat(o-1)+(i+a));I.surLocations.push("".concat(o-1)+(i-1)),I.surLocations.push("".concat(o)+(i-1)),i-1!=0&&I.surLocations.push("".concat(o+1)+(i-1)),I.surLocations.push("".concat(o-1)+(i+t.length)),I.surLocations.push("".concat(o)+(i+t.length)),I.surLocations.push("".concat(o+1)+(i+t.length))}},I={coords:[],vertical:!1,carrierCounter:0,cruiserCounter:0,destroyerCounter:0,gunboatCounter:0,surLocations:[]},x=function(){I.coords=[],I.vertical=!1,I.carrierCounter=0,I.cruiserCounter=0,I.destroyerCounter=0,I.gunboatCounter=0,I.surLocations=[]},E=function(n,e,t){var o,i,r,a;console.log(I),console.log(I.vertical),o=n,!1===I.vertical?t<8&&(o.addEventListener("mouseover",(function(){i=o.nextElementSibling,r=i.nextElementSibling,a=r.nextElementSibling,[o,i,r,a].forEach((function(n){n.classList.add("shipspot")}))})),o.addEventListener("mouseleave",(function(){var n=o.nextElementSibling,e=n.nextElementSibling,t=e.nextElementSibling;[o,n,e,t].forEach((function(n){n.classList.remove("shipspot")}))})),o.addEventListener("click",(function(){var n=o.nextElementSibling,i=n.nextElementSibling,r=i.nextElementSibling,a=[o,n,i,r];a.forEach((function(n){n.classList.add("ship")}));var c=["".concat(o.id),"".concat(n.id),"".concat(i.id),"".concat(r.id)];I.coords.push(c),I.carrierCounter+=1;for(var s=0;s<a.length;s++)I.surLocations.push(a[s].id);B(e,t,a),b(v),C()}))):!0===I.vertical&&e<8&&(o.addEventListener("mouseover",(function(){var n=document.getElementById("".concat(e+1).concat(t)),i=document.getElementById("".concat(e+2).concat(t)),r=document.getElementById("".concat(e+3).concat(t));[o,n,i,r].forEach((function(n){n.classList.add("shipspot")}))})),o.addEventListener("mouseleave",(function(){var n=document.getElementById("".concat(e+1).concat(t)),i=document.getElementById("".concat(e+2).concat(t)),r=document.getElementById("".concat(e+3).concat(t));[o,n,i,r].forEach((function(n){n.classList.remove("shipspot")}))})),o.addEventListener("click",(function(){var n=document.getElementById("".concat(e+1).concat(t)),i=document.getElementById("".concat(e+2).concat(t)),r=document.getElementById("".concat(e+3).concat(t)),a=[o,n,i,r];a.forEach((function(n){n.classList.add("ship")})),I.coords.push(["".concat(o.id),"".concat(n.id),"".concat(i.id),"".concat(r.id)]),I.carrierCounter+=1;for(var c=0;c<a.length;c++)I.surLocations.push(a[c].id);B(e,t,a),b(v),C()})))},y=function(n,e,t){var o,i,r;o=n,!1===I.vertical?t<9&&(o.addEventListener("mouseover",(function(){i=o.nextElementSibling,r=i.nextElementSibling,[o,i,r].forEach((function(n){n.classList.add("shipspot")}))})),o.addEventListener("mouseleave",(function(){var n=o.nextElementSibling,e=n.nextElementSibling;[o,n,e].forEach((function(n){n.classList.remove("shipspot")}))})),o.addEventListener("click",(function(){var n=o.nextElementSibling,i=n.nextElementSibling,r=[o,n,i],a=I.surLocations.indexOf(o.id),c=I.surLocations.indexOf(n.id),s=I.surLocations.indexOf(i.id);if(!(a>=0||c>=0||s>=0)){r.forEach((function(n){n.classList.add("ships")})),I.coords.push(["".concat(o.id),"".concat(n.id),"".concat(i.id)]),I.cruiserCounter+=1;for(var d=0;d<r.length;d++)I.surLocations.push(r[d].id);return B(e,t,r),b(v),void C()}b(v),C()}))):!0===I.vertical&&e<9&&(o.addEventListener("mouseover",(function(){var n=document.getElementById("".concat(e+1).concat(t)),i=document.getElementById("".concat(e+2).concat(t));[o,n,i].forEach((function(n){n.classList.add("shipspot")}))})),o.addEventListener("mouseleave",(function(){var n=document.getElementById("".concat(e+1).concat(t)),i=document.getElementById("".concat(e+2).concat(t));[o,n,i].forEach((function(n){n.classList.remove("shipspot")}))})),o.addEventListener("click",(function(){var n=document.getElementById("".concat(e+1).concat(t)),i=document.getElementById("".concat(e+2).concat(t)),r=[o,n,i],a=I.surLocations.indexOf(o.id),c=I.surLocations.indexOf(n.id),s=I.surLocations.indexOf(i.id);if(!(a>=0||c>=0||s>=0)){r.forEach((function(n){n.classList.add("ships")})),I.coords.push(["".concat(o.id),"".concat(n.id),"".concat(i.id)]),I.cruiserCounter+=1;for(var d=0;d<r.length;d++)I.surLocations.push(r[d].id);return B(e,t,r),b(v),void C()}console.log("im here"),b(v),C()})))},L=function(n,e,t){var o,i;o=n,!1===I.vertical?t<10&&(o.addEventListener("mouseover",(function(){i=o.nextElementSibling,[o,i].forEach((function(n){n.classList.add("shipspot")}))})),o.addEventListener("mouseleave",(function(){var n=o.nextElementSibling;[o,n].forEach((function(n){n.classList.remove("shipspot")}))})),o.addEventListener("click",(function(){var n=o.nextElementSibling,i=[o,n],r=I.surLocations.indexOf(o.id),a=I.surLocations.indexOf(n.id);if(!(r>=0||a>=0)){i.forEach((function(n){n.classList.add("ships")})),I.coords.push(["".concat(o.id),"".concat(n.id)]),I.destroyerCounter+=1;for(var c=0;c<i.length;c++)I.surLocations.push(i[c].id);return B(e,t,i),b(v),void C()}console.log("im here"),b(v),C()}))):!0===I.vertical&&e<10&&(o.addEventListener("mouseover",(function(){var n=document.getElementById("".concat(e+1).concat(t));[o,n].forEach((function(n){n.classList.add("shipspot")}))})),o.addEventListener("mouseleave",(function(){var n=document.getElementById("".concat(e+1).concat(t));[o,n].forEach((function(n){n.classList.remove("shipspot")}))})),o.addEventListener("click",(function(){var n=document.getElementById("".concat(e+1).concat(t)),i=[o,n],r=I.surLocations.indexOf(o.id),a=I.surLocations.indexOf(n.id);if(!(r>=0||a>=0)){i.forEach((function(n){n.classList.add("ships")})),I.coords.push(["".concat(o.id),"".concat(n.id)]),I.destroyerCounter+=1;for(var c=0;c<i.length;c++)I.surLocations.push(i[c].id);return B(e,t,i),b(v),void C()}b(v),C()})))},k=function(n,e,t){var o=n,i=I.surLocations.indexOf(o.id);o.addEventListener("mouseover",(function(){o.classList.add("shipspot")})),o.addEventListener("mouseleave",(function(){o.classList.remove("shipspot")})),o.addEventListener("click",(function(){var r=[n];if(!(i>=0)){o.classList.add("ships"),I.coords.push(["".concat(o.id)]),I.gunboatCounter+=1;for(var a=0;a<r.length;a++)I.surLocations.push(r[a].id);return B(e,t,r),b(v),void C()}b(v),C()}))},{removePlaceShipPopup:function(){document.getElementById("placeShips").style.display="none"},displayBoards:m,displayHit:function(n){var e=document.getElementById(n);e.classList.remove("ship"),e.classList.remove("miss"),e.classList.add("hit")},displayShips:function(n){for(var e=0;e<n.length;e++)""!==n[e]&&document.getElementById("".concat(n[e])).classList.add("ship")},displayMiss:function(n){var e=document.getElementById(n);e.classList.remove("ship"),e.classList.add("miss")},displaySurLocations:function(n){for(var e=function(e){var t=document.getElementById(n[e]);null!=t&&(t.classList.add("sur"),t.classList.add("scale"),setTimeout((function(){t.classList.remove("scale")}),150))},t=0;t<n.length;t++)e(t)},displayStartNew:function(n){var e=document.createElement("div");e.classList.add("startNew"),e.innerHTML="\n            <p> ".concat(n,' </p>\n            <button id="playAgain"> Play again </button> ');var t=document.createElement("div");t.classList.add("curtain");var o=document.getElementById("main"),i=document.getElementById("p2b");i.appendChild(t),o.appendChild(e),document.getElementById("playAgain").addEventListener("click",(function(){i.removeChild(t),o.removeChild(e),j.startNew()}))},placeShipsPopup:function(n){console.log(n[0].board.ships),console.log(n[1].board.ships),m(),x(),b(v),C(),document.getElementById("placeShips").style.display="flex",document.getElementById("ok").addEventListener("click",(function(){if(10===I.coords.length){var e=j.parseCoords(I.coords);j.passCoords(e,n),j.startPlaced(n)}})),document.getElementById("reset").addEventListener("click",(function(){x(),b(v),C()})),document.getElementById("random").addEventListener("click",(function(){j.startRandom(n)})),document.getElementById("rotate").addEventListener("click",(function(){I.vertical?(I.vertical=!1,console.log(I.vertical),b(v),C()):(I.vertical=!0,console.log(I.vertical),b(v),C())}))}}),Y=(w=function(n){var e=n,t=Math.ceil(2*Math.random()),o=[];return{setCoord:function(n){!function(n){throw new TypeError('"locations" is read-only')}()},locations:[],hits:o,isSunk:!1,gettingSunk:function(n){return-1===n.hits.indexOf("")&&(n.isSunk=!0,O.displaySurLocations(n.surLocations)),n.isSunk},direction:t,gettingHit:function(n){o[n]="hit"},shipLength:e,surLocations:[],forbLocations:[],startLocation:void 0}},S=function(n){var e=n,t=function(n){var e=n,t=[w(4),w(3),w(3),w(2),w(2),w(2),w(1),w(1),w(1),w(1)],o=function(n){var t,o,i=[],r=[];1===n.direction?(o=Math.ceil(10*Math.random()),t=Math.ceil(Math.random()*(10-(n.shipLength+1)))):(o=Math.ceil(Math.random()*(10-(n.shipLength+1))),t=Math.ceil(10*Math.random()));for(var a=0;a<n.shipLength;a++)1===n.direction?i.push(e+"".concat(o)+(t+a)):i.push(e+"".concat(o+a)+"".concat(t));if(1===n.direction){for(var c=0;c<n.shipLength;c++)r.push(e+"".concat(o+1)+(t+c)),r.push(e+"".concat(o-1)+(t+c));r.push(e+"".concat(o-1)+(t-1)),r.push(e+"".concat(o)+(t-1)),r.push(e+"".concat(o+1)+(t-1)),r.push(e+"".concat(o-1)+(t+n.shipLength)),r.push(e+"".concat(o)+(t+n.shipLength)),r.push(e+"".concat(o+1)+(t+n.shipLength))}else{for(var s=0;s<n.shipLength;s++)r.push(e+"".concat(o+s)+(t+1)),r.push(e+"".concat(o+s)+(t-1));r.push(e+"".concat(o-1)+(t-1)),r.push(e+"".concat(o-1)+t),r.push(e+"".concat(o-1)+(t+1)),r.push(e+"".concat(o+n.shipLength)+(t-1)),r.push(e+"".concat(o+n.shipLength)+t),r.push(e+"".concat(o+n.shipLength)+(t+1))}return[i,r]},i=function(n){for(var e=0;e<t.length;e++){for(var o=0;o<n.length;o++)if(t[e].forbLocations.indexOf(n[o])>=0)return!0;console.log("no collisions on ship ".concat(t[e]))}return!1};return{ships:t,illegalMoves:[],receiveAttack:function(n,e){e.board.illegalMoves.push(n),console.log(e.board.illegalMoves);for(var o=0;o<t.length;o++){if(t[o].locations.indexOf(n)>=0){O.displayHit(n),t[o].gettingHit(t[o].locations.indexOf(n)),t[o].gettingSunk(t[o]),t[o].gettingSunk(t[o])&&(e.board.illegalMoves=e.board.illegalMoves.concat(t[o].surLocations));break}-1===t[o].locations.indexOf(n)&&O.displayMiss(n)}},shipsSunk:function(){for(var n=[],e=0;e<t.length;e++)!0===t[e].isSunk&&n.push(t[e]);return n},randomLocations:function(){for(var n,e,r,a=0;a<t.length;a++){do{var c=o(t[a]);n=c[0],e=c[1],r=n.concat(e)}while(i(n));t[a].locations=n,t[a].surLocations=e,t[a].forbLocations=r;for(var s=0;s<t[a].shipLength;s++)t[a].hits.push("")}}}}(e);return{playerId:e,board:t,getFleet:function(){for(var n=[],e=0;e<t.ships.length;e++)for(var o=0;o<t.ships[e].locations.length;o++)n.push(t.ships[e].locations[o]);return n},isWinner:!1}},{initPlayers:function(){return[S(1),S(2)]}});M=Y.initPlayers(),console.log(M[0].board.ships),console.log(M[1].board.ships),O.placeShipsPopup(M)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
